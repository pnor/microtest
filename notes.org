#+title: Notes

Design


* general how-to-setup project
a testing *library*
so should build into a library, and then u import it and use it


* features
For each type of testing:
- graph based
- input domain
- logic
- syntax

Translating that into test types:
- normal *expectEquals* for input domain
- some kind of milestones for graph based, and check all paths traversed
- ? for logic
- ? for syntax


* Input Domain
ExpectEquals to test the actual output

then to demonstrate, run many kinds of tests on simple functions based on different input domains
using the expect equals library

* Graph Based

** general idea
Allow user to define milestones in the code (explicitly placed)

Then after running a suite of tests, and look to see if all the milestones where hit

In writeup can draw a similar lookig test map

** How
global way: make singleton, have lines post to it when it reaches the code
- simple
- but not at all thread safe
(might have to, and this is a dumbass project already)

Singelton
microtest has a tracker object that stores string tags
- startGraphTracking
  + return an obj and setup a singelton for strings
  + when it gets dropped, clear the singleton
- graphNode("...")
  + writes to the singelton
- checkCoverage("...")
  + checks if all tags hit




* logic
clauses and stuff

* Syntax
Mutation Testing based on this
https://pitest.org/quickstart/mutators/

How  to test though?
Have to:
- mutate func
- run a suite of tests
- count number mutations that pass all tests => "survived"
- count number that failed => "killed"
- run error => "not necessarily killed but kinda"

  ====
- assign unique hash to each mutabable line
  + how? can't auto do it easily cuz needs to execute all paths to reach a line
to assign a unique code to mutate it
  + can have programmer explcitly declare tags ahead of time (will work, kinda
ugly)
- for each combination of mutable lines run the test suite on the function
- count success or failure per mutation


Functions
runMutationTests(testFunc, testSuite, mutationTags)
- take in test function (with mutation tags) and test cases
- for each tag combination, record tag combo + passed or failed
- and report total mutants survived and failed
mutatePoint(tag)
- apply some kinda mutation
- tag stored
- checks global/static activeTag location

  MutationTest class
  - store static activeTags



* Writeup Drafting

** Graph Based
The best way to check if all paths through a block of testable code is through coverage tests like
gcov in c++ or the coverage library in Python. This will provide an exhaustive check through every
written line.

To demonstrate a smaller, simpler example of testing through graph based coverage, I've used a node
based approach where the programmer explicitly annotates certain lines in a function and then the
test suite asserts all lines of code where hit after running a suite of tests. This is not at all as
exhasutive as a full coverage based approach, but this captures some of the essence of testing via
graph based methods.

* Main src code itslef
Demo some random leetcode question
- working version
- broke version

Then print test case results of:

expectation tests
graph tests
logic tests
mutation tests
